package MakruraCarapace


// Standard library imports:
import AbilityObjEditing
import HashMap
import ClosureEvents
import ObjectIdGenerator
import ClosureTimers
import ChannelAbilityPreset
import ObjEditingUtils
import OnUnitEnterLeave

// Local imports:
import LocalObjectIDs
import HealingItems
import Panic
import StringBuilder
import ToolTipsUtils
import LocalAssets
import ObjectIds
import ItemIds
import HealingSystem
import Orders
import UnitExtensions
import HashList
import UnitIds
import DestructableObjEditing
import DamageEvent
import DamageListeners
import IdListConstant
import ShieldsDefinition
import Pets
import ColorUtils
import EquipmentSlots

IterableMap<item, MakruraCarapace> instances = new IterableMap<item, MakruraCarapace>()
constant DEFAULT_TT = MAKRURA_CARAPACE_TOOLTIP

class MakruraCarapace
    item itm
    unit currentOwner
    real reflectedDamage = 0
    bool isItemOnCooldown = false
    construct(unit currentOwner, item itm)
        this.currentOwner = currentOwner
        this.itm = itm
        updateTooltip()

    function onAttack(unit source, unit target, real originalAmount)
        if isItemOnCooldown
            return
        if source.isTroll() or source.isPet()
            reflectedDamage+=originalAmount
        currentOwner = target
        nullTimer() -> 
            let currentLife = target.getLife()
            target.setLife(currentLife+originalAmount)
            if not source.isInvulnerable()
                source.damageTarget(source, originalAmount, true, false, ATTACK_TYPE_HERO, DAMAGE_TYPE_NORMAL, null)
                flashEffect("Objects\\Spawnmodels\\Naga\\NagaDeath\\NagaDeath.mdl", source.getPos())
        isItemOnCooldown = true
        currentOwner.startAbilityCooldown(ABILITY_CARAPACE_DUMMY, MAKRURA_CARAPACE_COOLDOWN)
        doAfter(MAKRURA_CARAPACE_COOLDOWN) ->
            isItemOnCooldown = false

    function updateTooltip()
        let NEW_TT = DEFAULT_TT+("\nPremetigated damage reflected: "+reflectedDamage..toInt().toString()).color(COLOR_GOLD)
        itm.setExtendedTooltip(NEW_TT)

function onAttack(unit source, unit target, real originalAmount)
    if source.getOwner().isAllyOf(target.getOwner())
        return
    let itm = target.getItemById(ITEM_MAKRURA_CARAPACE) != null ? target.getItemById(ITEM_MAKRURA_CARAPACE) : target.getItemEquippedById(ITEM_MAKRURA_CARAPACE)
    let instance = instances.get(itm)
    if instance == null
        return
    instance.onAttack( source,  target,  originalAmount)

function onItemUse(item itm)
    if itm.getTypeId() != ITEM_MAKRURA_CARAPACE
        return
    let instance = instances.get(itm)
    if instance.isItemOnCooldown
        return
    nullTimer() -> 
        instance.currentOwner.endAbilityCooldown(ABILITY_CARAPACE_DUMMY)
        

        
function onFirstPickup(unit troll, item itm)
    if not troll.isTroll()
        return
    if not instances.has(itm)
        instances.put(itm, new MakruraCarapace(troll, itm))

init
    EventListener.add(EVENT_PLAYER_UNIT_PICKUP_ITEM) -> 
        if EventData.getManipulatedItem().getTypeId() == ITEM_MAKRURA_CARAPACE
            onFirstPickup(GetManipulatingUnit(), GetManipulatedItem())

    registerOnEquipEvent(ITEM_MAKRURA_CARAPACE) (unit troll, item itm) ->
        onFirstPickup(troll, itm) 

    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_USE_ITEM) ->
        onItemUse(GetManipulatedItem())


    //filter valid targets
    DamageEvent.addListener(DamageListenerPriorities.PANTHER_INSTINCT castTo int) ->
        if DamageEvent.getType() == DamageType.ATTACK and 
            (DamageEvent.getTarget().hasItemById(ITEM_MAKRURA_CARAPACE)  or DamageEvent.getTarget().getItemEquippedById(ITEM_MAKRURA_CARAPACE)!= null)
            and (DamageEvent.getSource().isTroll() 
            or DamageEvent.getSource().isBoss()
            or HOSTILE_ANIMALS_LIST.has(DamageEvent.getSource().getTypeId())
            or PETS_LIST.has((DamageEvent.getSource().getTypeId()))
            )

            onAttack(DamageEvent.getSource(), DamageEvent.getTarget(), DamageEvent.getUnreducedOriginalAmount())           
            
    
