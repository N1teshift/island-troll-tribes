package MoveCorpses

// Standard library imports:
import AbilityObjEditing
import Assets
import ClosureEvents
import ClosureForGroups
import ClosureKeyPresses
import ClosureTimers
import LastOrder
import LinkedList
import HashMap
import HashList
import ObjectIds
import ObjectIdGenerator
import Orders

// Local imports:
import LocalObjectIDs
import ColorUtils
import DummyCorpse
import LocalAssets
import PlayerExtensions
import SimError
import Transformation
import HealingItems
import HealingSystem
import UnitExtensions

// The time for which new abilities are disabled to prevent accidental rollback.
// TODO: Use a per-player setting for this.
// TODO: Allow lockout to be manually overridden.
public let LOCKOUT = 1.

// The maximum number of corpses allowed to be carried per unit.
@configurable public let MAX_COUNT = 8

// The location of the abilities on the X-axis.
@configurable public let POSITION_X = 0

// The location of the abilities on the Y-axis.
@configurable public let POSITION_Y = 2

// The icons used for the grab abilities by default.
public let GRAB_ICONS = asList(
    LocalIcons.bTNCorpseGrab0,
    LocalIcons.bTNCorpseGrab1,
    LocalIcons.bTNCorpseGrab2,
    LocalIcons.bTNCorpseGrab3,
    LocalIcons.bTNCorpseGrab4,
    LocalIcons.bTNCorpseGrab5,
    LocalIcons.bTNCorpseGrab6,
    LocalIcons.bTNCorpseGrab7,
    // A placeholder value used for a dummy ability.
    ""
)

// The icons used for the drop abilities by default.
public let DROP_ICONS = asList(
    // A placeholder value used for a dummy ability.
    "",
    LocalIcons.bTNCorpseDrop1,
    LocalIcons.bTNCorpseDrop2,
    LocalIcons.bTNCorpseDrop3,
    LocalIcons.bTNCorpseDrop4,
    LocalIcons.bTNCorpseDrop5,
    LocalIcons.bTNCorpseDrop6,
    LocalIcons.bTNCorpseDrop7,
    LocalIcons.bTNCorpseDrop8
)

// The IDs used for the grab abilities by default.
@configurable public let GRAB_IDS = asList(
    LocalAbilityIds.corpseGrab0,
    LocalAbilityIds.corpseGrab1,
    LocalAbilityIds.corpseGrab2,
    LocalAbilityIds.corpseGrab3,
    LocalAbilityIds.corpseGrab4,
    LocalAbilityIds.corpseGrab5,
    LocalAbilityIds.corpseGrab6,
    LocalAbilityIds.corpseGrab7,
    // A placeholder value used for a dummy ability.
    compiletime(ABIL_ID_GEN.next())
)

// The IDs used for the drop abilities by default.
public let DROP_IDS = asList(
    // A placeholder value used for a dummy ability.
    compiletime(ABIL_ID_GEN.next()),
    LocalAbilityIds.corpseDrop1,
    LocalAbilityIds.corpseDrop2,
    LocalAbilityIds.corpseDrop3,
    LocalAbilityIds.corpseDrop4,
    LocalAbilityIds.corpseDrop5,
    LocalAbilityIds.corpseDrop6,
    LocalAbilityIds.corpseDrop7,
    LocalAbilityIds.corpseDrop8
)

// The functions used to get the ability fields, per level.
@configurable IntLevelClosure getDropID = lvl -> DROP_IDS.get(lvl)
@configurable IntLevelClosure getGrabID = lvl -> GRAB_IDS.get(lvl)
@configurable StringLevelClosure getDropIcon = lvl -> DROP_ICONS.get(lvl)
@configurable StringLevelClosure getGrabIcon = lvl -> GRAB_ICONS.get(lvl)

// The number of corpses each unit is carrying.
public let counts = new HashMap<unit, int>

// The units whose orders are ignored.
public let disabled = new HashList<unit>

// The order IDs used to indicate switching abilities and their opposites.
public let switches = new HashMap<int, int>()
    ..put(OrderIds.raisedeadon, OrderIds.raisedeadoff)
    ..put(OrderIds.replenishon, OrderIds.replenishoff)

@compiletime function createDummyMeatGather()
    new UnitDefinition(LocalUnitIds.dummyMeatGather, UnitIds.deer)

// Used to grab meat via a Raise Dead effect.
// TODO: Base tooltip directly on gameplay constant for decay time.
@compiletime function createGrabCorpse()
    for index = 0 to MAX_COUNT
        new AbilityDefinitionRaiseDead(GRAB_IDS.get(index))
            ..setIconNormal(GRAB_ICONS.get(index))
            // The two abilities share the same slot.
            ..setButtonPositionNormalX(POSITION_X)
            ..setButtonPositionNormalY(POSITION_Y)
            // The hotkey is not positional.
            ..setHotkeyNormal("C")
            // Set the sound effect separately from the art effect.
            ..setEffectSound(SoundEffects.loadUnload)
            // The corpse is grabbed without an art effect.
            ..setArtEffect("")
            // The ability only ever summons a single dummy unit.
            ..setLevels(1)
            ..presetUnitTypeOne(lvl -> commaList(LocalUnitIds.dummyMeatGather))
            ..presetUnitsSummonedTypeOne(lvl -> 1)
            ..presetUnitsSummonedTypeTwo(lvl -> 0)
            ..presetManaCost(lvl -> 0)
            ..presetCooldown(lvl -> 0)
            ..presetButtonPosNormal(POSITION_X, POSITION_Y)
            // The radius from which the order can be issued.
            ..presetAreaofEffect(lvl -> 800)
            // The ability is cast at melee range.
            ..presetCastRange(lvl -> 128)
            ..presetTooltipNormal(lvl -> "|c00ffcc00C|r - Grab Corpse")
            ..presetTooltipNormalExtended(lvl -> "Grabs a nearby corpse and stores it for later use. Unattended corpses will rot after two minutes.|n" + "Current Capacity: {0} / {1}".color(GOLD_COLOR).format(index.toString(), MAX_COUNT.toString()))
            ..presetTooltipTurnOff(lvl -> "Right-click or CTRL + Z to begin dropping corpses.".color(ENERGY_COLOR))

// Used to drop meat via a Replenish effect, configured to not affect any units.
// This ability is used because it has autocast and does not require a target.
// It also supports instant casting, similar to unloading a corpse.
@compiletime function createDropCorpse()
    for index = 0 to MAX_COUNT
        new AbilityDefinitionReplenishLifeMana(DROP_IDS.get(index))
            ..setIconNormal(DROP_ICONS.get(index))
            // The two abilities share the same slot.
            ..setButtonPositionNormalX(POSITION_X)
            ..setButtonPositionNormalY(POSITION_Y)
            // The hotkey is not positional.
            ..setHotkeyNormal("C")
            // Set the sound effect separately from the art effect.
            ..setEffectSound(SoundEffects.loadUnload)
            // The corpse is dropped without an art effect.
            ..setArtCaster("")
            ..setArtTarget("")
            ..setArtSpecial("")
            // Remove the actual effect.
            ..presetBuffs(lvl -> "")
            ..presetHitPointsGained(lvl -> 0)
            ..presetManaPointsGained(lvl -> 0)
            ..presetButtonPosNormal(POSITION_X, POSITION_Y)
            ..presetManaCost(lvl -> 0)
            ..setName("Drop Corpse")
            ..presetTooltipNormal(lvl -> "|c00ffcc00C|r - Drop Corpse")
            ..presetTooltipNormalExtended(lvl -> "Drops a carried corpse onto the ground.|n" + "Current Capacity: {0} / {1}".color(GOLD_COLOR).format(index.toString(), MAX_COUNT.toString()))
            ..presetTooltipTurnOff(lvl -> "Right-click or CTRL + Z to begin grabbing corpses.".color(ENERGY_COLOR))


// Checks whether the unit is able to move corpses.
// TODO: Support the case where a unit loses the ability to move corpses.
function unit.canMoveCorpses() returns bool
    // Check if the unit is currently tracked.
    if counts.has(this)
        return true

    // Check if the unit has the original, unused ability.
    if this.hasAbility(getGrabID.run(0))
        return true

    // Output the failure case.
    return false

// Switches between ability tracks, outputting the new ability ID.
function switchAbilities(unit target) returns int
    // Look up the state for the unit.
    let count = counts.get(target)

    // Look up the correponding abilities on the two tracks.
    let grabID = getGrabID.run(count)
    let dropID = getDropID.run(count)

    // Check which track the unit is currently on.
    let isGrab = target.hasAbility(grabID)

    // Compute the old ability.
    let oldID = isGrab ? grabID : dropID

    // Compute the new ability.
    let newID = isGrab ? dropID : grabID

    // Ignore orders to switch to an unsuable ability.
    if  (not isGrab and count == MAX_COUNT) or (isGrab and count == 0)
        // Issue the owner the appropriate error.
        let message = oldID == grabID
            ? "This unit is not carrying any corpses."
            : "This unit cannot carry any more corpses."

        // Notify the user of the failure.
        simError(target.getOwner(), message)

        // Exit without swapping abilities.
        return 0

    // Remove the current ability.
    target.removeAbility(oldID)

    // Add the corresponding ability.
    target.addAbility(newID)

    // Ensure that the ability is maintained during transformation.
    target.makeAbilityPermanent(newID, true)

    // Indicate success.
    return newID

function onDrop(unit caster)
    // Create the corpse that is dropped.
    createCorpse(caster.getPos())

    // Decrement the count.
    updateCount(caster, -1)


function onGrab(unit caster, unit target)
    // Exit if the unit is not the dummy for gathering meat.
    if target.getTypeId() != LocalUnitIds.dummyMeatGather
        return

    // Remove the target, as its purpose is only to trigger this event.
    target.remove()

    // Increment the count.
    updateCount(caster, 1)

public function updateCount(unit target, int differential)
    // Exit if no work is required.
    if differential == 0
        return     

    // Look up the count for the unit prior to the update.
    let prior = counts.get(target)

    // Compute the count for unit after the update, based on the boundaries.
    let after = (prior + differential).clamp(0, MAX_COUNT)

    // Update the state.
    counts.put(target, after)

    // Check which track the unit is currently on.
    let track = target.hasAbility(getGrabID.run(prior)) ? getGrabID : getDropID

    // Remove the current ability.
    target.removeAbility(track.run(prior))

    // Add the ability corresponding to the new count.
    target.addAbility(track.run(after))

    // Ensure that the ability is maintained during transformation.
    target.makeAbilityPermanent(track.run(after), true)

    // Exit if no further operations are needed.
    if after != 0 and after != MAX_COUNT
        return

    // Switch abilities if the unit has reached the end of a track.
    let newID = switchAbilities(target)

    // Disable the new ability temporarily to prevent accidental rollback.
    target.disableAbility(newID, true, false)

    // Enable the new ability after a suitable interval.
    doAfter(LOCKOUT) ->
        target.disableAbility(newID, false, false)

// TODO: Don't cancel orders for abilities that can actually have autocast.
function onOrder(unit target, int orderID)
    // Ensure that this trigger cannot recurse.
    if disabled.has(target)
        return

    // Look up the corresponding index for the order ID.
    let oppositeID = switches.get(orderID)

    // Exit if the order ID does not indicate a switch.
    if oppositeID == 0
        return

    // Exit if the order is not associated with a unit moving corpses.
    if not target.canMoveCorpses()
        return

    // Switch the abilities, as requested.
    if switchAbilities(target) != 0
        // Exit upon success, as disabling abilities includes undoing the order.
        return

    // Store the previous order for later use.
    let previous = target.getLastOrder()

    // Wait for the current order to finish before counteracting it.
    nullTimer() ->
        // Disable this listener to prevent recursion.
        disabled.add(target)

        // Issue the opposite order to undo the illegal autocast action.
        target.issueImmediateOrderById(oppositeID)

        // Issuing the opposite order will cancel others, despite being immediate.
        nullTimer() ->
            // Reissue the order the unit would have continued to perform.
            if previous != null and not previous.finished
                previous.issue()

        // Enable this listener again.
        disabled.remove(target)

function onTransformation(unit target)
    // Remove the default ability if the unit will already have another.
    // Adding an ability is not required, as it will already be permanent.
    if counts.get(target) != 0
        target.removeAbility(getGrabID.run(0))

function onDeath(unit target)
    // Look up the current count for the unit.
    let count = counts.get(target)

    // Exit if no work is required.
    if count == 0
        return

    // Update the state for the unit.
    updateCount(target, -count)

    // Create the corpses.
    for _ = 1 to count
        createCorpse(target.getPos())

function onKey(player triggerer)
    // Attempt to switch the ability for each unit selected.
    forUnitsSelected(triggerer) (unit target) ->
        // Check that the action is both legal and valid.
        if triggerer.canControl(target) and target.canMoveCorpses()
            switchAbilities(target)

function onShiftKey(player triggerPlayer)
    // Attempt to switch the ability for each unit selected.
    forUnitsSelected(triggerPlayer) (unit target) ->
        fixCorpseSystem(target)
        // Check that the action is both legal and valid.
        //updateCount(target, 1)
        //nullTimer() -> 
            //updateCount(target, -1)  

function fixCorpseSystem(unit target)
    // Create the corpse to be used.
    let corpse = CreateCorpse(
        players[PLAYER_NEUTRAL_AGGRESSIVE],
        UnitIds.footman,
        target.getX(),
        target.getY(),
        0
    )

   // Add in the ability prior to the order, as necessary.
    if not target.hasAbility(LocalAbilityIds.corpseConsume)
        target.addAbility(LocalAbilityIds.corpseConsume)
        doAfter(0.4) -> 
            target.removeAbility(LocalAbilityIds.corpseConsume)
    // Save the unit original hit points in order to reset them later.
    let health = target.getHP()

    // Ensure that the unit can attempt to consume the corpse.
    target.setHP(1)              
        // Issue the order, allowing the target to default to the new corpse.
    if not target.issueImmediateOrderById(Orders.cannibalize)
        target.getOwner().print(
            "Failed to fix corpse targeting for {0}".format(
                target.getName()
            )
        )
    target.setHP(health) 
    doAfter(0.4) -> 
        corpse.remove()
                   

init
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SUMMON) ->
        onGrab(EventData.getSummoningUnit(), EventData.getSummonedUnit())

    for index = 0 to MAX_COUNT
        registerSpellEffectEvent(getDropID.run(index)) ->
            onDrop(EventData.getSpellAbilityUnit())

    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_ORDER) ->
        onOrder(EventData.getOrderedUnit(), EventData.getIssuedOrderId())

    
    // TODO: Support dropping meat if only the origin supports grabbing corpses.
    registerAfterEffect() (unit target, int unitID) ->
        onTransformation(target)

    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH) ->
        onDeath(EventData.getDyingUnit())

    // Create the trigger to allow for psuedo-hotkey functionality.
    onKeyPress(OSKEY_Z, OSKEY_META.CTRL) ->
        onKey(GetTriggerPlayer())
    // Create the trigger to allow for psuedo-hotkey functionality.
    onKeyPress(OSKEY_Z, OSKEY_META.SHIFT) ->
        onShiftKey(GetTriggerPlayer())

          
                    

