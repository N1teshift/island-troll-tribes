package PhilosophersStone

// Standard library imports:
import HashMap
import ClosureEvents
import ChannelAbilityPreset

// Local imports:
import LocalObjectIDs
import ToolTipsUtils
import LocalAssets
import UnitExtensions
import ClosureTimers
import Items
import LocalItemObjEditing
import Abilities
import SimError
import ColorUtils
import QuickMake


let MAX_ENERGY_INT_MULTIPLIER = 0.8
let ENERGY_REGEN_INT_MULTIPLIER = 0.2

let TT_PHILOSOPHERS_STONE = "Philosopher's stone converts Alchemist's mana into energy over time. It can be used to conjure Potion effects"+
                            "\nCosts 2 mana per 1 energy".color(COLOR_LIGHT_BLUE)+
                            "\nMaximum energy = "+"10".color(COLOR_LIGHT_BLUE)+" +{0}".format(MAX_ENERGY_INT_MULTIPLIER.toString().color(COLOR_TURQUOISE))+ "Intelligence".color(COLOR_TURQUOISE)+
                            "\nConverts "+"{0} ".format(ENERGY_REGEN_INT_MULTIPLIER.toString().color(COLOR_LIGHT_BLUE))+" + "+"{0} ".format(ENERGY_REGEN_INT_MULTIPLIER.toString().color(COLOR_LIGHT_BLUE))+
                            "per "+"20 Intelligence ".color(COLOR_TURQUOISE)+"energy per second."


@compiletime function createcreatePhilosophersStone() returns ItemDefinition
    return createBasicItem(ITEM_PHILOSOPHERS_STONE)
        ..setInterfaceIcon(Icons.bTNHeartOfSearinox)
        ..setDescription("Philosopher's stone")
        ..setTintingColor1Red(136)
        ..setTintingColor2Green(0)
        ..setTintingColor3Blue(255)
        ..setModelUsed(LocalItems.gemOfKnowledge)
        ..setHotkey("")
        ..setScalingValue(0.8)
        ..setNameEnhance("Philosopher's stone")
        ..setTooltipExtended(TT_PHILOSOPHERS_STONE)



@compiletime function abilityCreatePhilosophersStone()
    new ChannelAbilityPreset(ABILITY_CREATE_PHILOSOPHERS_STONE, 1, true)
        ..presetCastingTime(lvl-> 0)
        ..presetManaCost(lvl -> 0)
        ..presetCooldown(lvl -> 1.0)
        ..setHeroAbility(true)
        ..setHotkeyNormal("E")
        ..setName("Create Philosophers's stone")
        ..presetTooltipNormal(lvl -> makeToolTipNorm("E", "Create Philosophers's stone"))
        ..presetTooltipNormalExtended(lvl -> "Create Philosophers stone\n\n"+TT_PHILOSOPHERS_STONE)
        ..setIconNormal(Icons.bTNHeartOfSearinox)
        ..setIconResearch(Icons.bTNHeartOfSearinox)
        ..setIconTurnOff(Icons.bTNHeartOfSearinox)
        ..setButtonPositionNormalX(1)
        ..setButtonPositionNormalY(1)
        ..setFollowThroughTime(1, 0)
        ..setEditorSuffix("(Wurst)")




class PhilosophersStoneInstance
    private unit hero
    private real baseClock
    private item itemHandle
    private real charges
    private CallbackPeriodic cb
    private real chargesRegenPeriod = 0.125
    bool isTriggerPaused = false

    construct(unit hero)
        this.hero = hero
        this.baseClock = 0
        this.itemHandle = createItem(ITEM_PHILOSOPHERS_STONE, hero.getPos())
        doAfter(ANIMATION_PERIOD) ->       
            hero.addItemHandle(itemHandle)
            //this.itemHandle = hero.addItemById(ITEM_PHILOSOPHERS_STONE)  
            itemHandle.setPawnable(false)
            this.hero.disableAbility(ABILITY_CREATE_PHILOSOPHERS_STONE, true, false)
            hero.getOwner().setAbilityIcon(ABILITY_ALCHEMIST_SPELLBOOK, Icons.bTNHeartOfSearinox)            
            this.cb = doPeriodically(chargesRegenPeriod) cb ->
                updateCharges()          

    function updateCharges()
        if hero.getMana()<=20. and hero.hasItem(itemHandle)
            return        
        let chargesCap = 10+MAX_ENERGY_INT_MULTIPLIER*hero.getInt(true)
        let chargesRegenPerSecond = 0.25+ENERGY_REGEN_INT_MULTIPLIER/20*hero.getInt(true)
        if charges>=chargesCap
            return
        hero.setMana(hero.getMana()-2*chargesRegenPeriod*chargesRegenPerSecond)
        charges=charges+chargesRegenPeriod*chargesRegenPerSecond
        itemHandle.setCharges(charges.floor())


    function spendCharges(int chargesSpent) returns bool
        if charges>=chargesSpent
            charges=charges-chargesSpent
            return true
        else
            return false

    function onRevive()
        doAfter(ANIMATION_PERIOD) ->   
            hero.addItemHandle(itemHandle)
    

    ondestroy
        hero.disableAbility(ABILITY_CREATE_PHILOSOPHERS_STONE, false, false) 
        destroy cb

public IterableMap<unit, PhilosophersStoneInstance> instances = new IterableMap<unit, PhilosophersStoneInstance>()

function onAbilityCreatePhilosophersStone(unit u)
    if u.isTroll()
        if not instances.has(u) and not u.hasItemById(ITEM_PHILOSOPHERS_STONE)
            instances.put(u, new PhilosophersStoneInstance(u))
            flashEffect(Abilities.tomeOfRetrainingCaster, u.getPos())

function onDropPhilosophersStone(unit u, item itm)
    let instance = instances.get(u)
    if instance == null 
        return
    if instance.isTriggerPaused
        return 
    nullTimer()->
        if u.isAlive()
            u.addItemHandle(itm)
        else
            itm.setVisible(false) 

function onRevive(unit u)
    let instance = instances.get(u)
    if instance == null
        return
    instance.onRevive() 
        
function onQuickMakePriorEffect(unit troll)
    let instance = instances.get(troll)
    if instance == null 
        return
    instance.isTriggerPaused=true
    
function onQuickMakeAfterEffect(unit troll)
    let instance = instances.get(troll)
    if instance == null 
        return
    instance.isTriggerPaused=false



init
    registerQuickMakePriorEffect() (unit target, int unitID) ->
        onQuickMakePriorEffect(target)

    registerQuickMakeAfterEffect() (unit target, int unitID) ->
        onQuickMakeAfterEffect(target)

    EventListener.onCast(ABILITY_CREATE_PHILOSOPHERS_STONE) (unit caster) ->
        if caster.isInventoryFull()
            simError(caster.getOwner(), "Your inventory is full")
        else
            onAbilityCreatePhilosophersStone(caster)  

    EventListener.add(EVENT_PLAYER_HERO_REVIVE_FINISH) ->
        onRevive(GetTriggerUnit())

    EventListener.add(EVENT_PLAYER_UNIT_DROP_ITEM) ->
        if GetManipulatedItem().getTypeId() == ITEM_PHILOSOPHERS_STONE
            onDropPhilosophersStone(GetManipulatingUnit(), GetManipulatedItem())

