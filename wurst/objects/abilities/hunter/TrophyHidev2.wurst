package TrophyHidev2

// Standard library imports:
import Assets
import BuffObjEditing
import ChannelAbilityPreset
import ClosureEvents
import ClosureTimers
import HashMap
import LinkedList
import ItemObjEditing
import Items
import Cosmetics
import OnUnitEnterLeave
import Reflection

// Third-party imports:
import Lodash

// Local imports:
import ColorUtils
import LocalObjectIDs
import LocalAssets
import Classes
import IdListConstant
import InventoryEvent
import UnitExtensions
import Orders
import QuickMake
import AxesDefinition
import initlater GatheringSlot

constant TT_ELK_TROPHY_HIDE ="\n\nElk hide: "+
                             "\n +1 ".color(ENERGY_COLOR)+"armor."+ 
                             "\n +20 ".color(ENERGY_COLOR)+"movement speed."
constant TT_WOLF_TROPHY_HIDE="\n\nWolf hide: "+
                             "\n +2 ".color(ENERGY_COLOR)+"armor."+ 
                             "\n +10% ".color(ENERGY_COLOR)+"attack speed."
constant TT_BEAR_TROPHY_HIDE="\n\nBear hide: "+
                             "\n +4 ".color(ENERGY_COLOR)+"armor."
constant TT_PANTHER_FANG    ="\n\nA Fang of the Elder Panther. "+
                 "\n+{0} Damage. ".format("6".color(COLOR_GREEN))+
                 "\nCan be used to quickmake a "+"Fire Kit".color(COLOR_LIGHT_BLUE)+" using the fang instead of flint."
                            

constant TT_TROPHY ="A hunter's trophy, worn on the back to display his combat prowess."
constant TT_TROPHIES="\nYou can put a hide, Panther Fang or Mammoth Horn in this slot"
constant TT_DUMMY_ITEM_EXTENDED = "Hunter can wear an animal hide as a trophy cloak, gaining bonuses depending on the type of the hide:"+
                                    TT_ELK_TROPHY_HIDE+
                                    TT_WOLF_TROPHY_HIDE+
                                    TT_BEAR_TROPHY_HIDE+
                                    TT_TROPHIES.color(COLOR_GOLD) 
constant TT_LIST = asList(TT_ELK_TROPHY_HIDE,
                          TT_WOLF_TROPHY_HIDE,
                          TT_BEAR_TROPHY_HIDE)

constant ABILITY_ELK_TROPHY_HIDE = asList(ABILITY_MOVESPEED_20, ABILITY_ARMOR_BONUS_1)
constant ABILITY_WOLF_TROPHY_HIDE = asList(ABILITY_ATTACK_SPEED_10, ABILITY_ARMOR_BONUS_2)
constant ABILITY_BEAR_TROPHY_HIDE = asList(ABILITY_ARMOR_BONUS_4)
constant TROPHY_HIDE_ABILITY_LIST = asList(ABILITY_ELK_TROPHY_HIDE,
                                           ABILITY_WOLF_TROPHY_HIDE,
                                           ABILITY_BEAR_TROPHY_HIDE)
constant ABILITY_PANTHER_FANG_TROPHY = asList(ABIL_DMG_STONE)
public constant TROPHY_LIST = asList(ITEM_HUNTER_TROPHY_ELK_HIDE, ITEM_HUNTER_TROPHY_WOLF_HIDE, ITEM_HUNTER_TROPHY_BEAR_HIDE, ITEM_HUNTER_TROPHY_FANG)                                   
public constant TROPHY_BASE_LIST=HIDE_LIST.copy()
    ..add(ITEM_PANTHER_FANG)
    ..add(ITEM_HORN_MAMMOTH)

public IterableMap<unit, TrophyHide> trophyHideInstances = new IterableMap<unit, TrophyHide>()
IterableMap<int, Attachment> attachments = new IterableMap<int, Attachment>()
    ..put(ITEM_ELK_HIDE,         new Attachment("Trophy Hide", TT_ELK_TROPHY_HIDE, LocalIcons.bTNElkTrophyHide, LocalItems.elkTrophyHide, AttachmentPoints.chest))
    ..put(ITEM_JUNGLE_WOLF_HIDE, new Attachment("Trophy Hide", TT_WOLF_TROPHY_HIDE, LocalIcons.bTNWolfTrophyHide, LocalItems.wolfTrophyHide, AttachmentPoints.chest))
    ..put(ITEM_JUNGLE_BEAR_HIDE, new Attachment("Trophy Hide", TT_BEAR_TROPHY_HIDE, LocalIcons.bTNBearTrophyHide, LocalItems.bearTrophyHide, AttachmentPoints.chest))

HashMap<int, int>hideToTrophyMap = new HashMap<int,int>()
    ..put(ITEM_ELK_HIDE, ITEM_HUNTER_TROPHY_ELK_HIDE)
    ..put(ITEM_JUNGLE_WOLF_HIDE, ITEM_HUNTER_TROPHY_WOLF_HIDE)
    ..put(ITEM_JUNGLE_BEAR_HIDE, ITEM_HUNTER_TROPHY_BEAR_HIDE)
    ..put(ITEM_PANTHER_FANG, ITEM_HUNTER_TROPHY_FANG)

HashMap<int, int>trophyToHideMap = new HashMap<int,int>()
    ..put(ITEM_HUNTER_TROPHY_ELK_HIDE, ITEM_ELK_HIDE)
    ..put(ITEM_HUNTER_TROPHY_WOLF_HIDE, ITEM_JUNGLE_WOLF_HIDE)
    ..put(ITEM_HUNTER_TROPHY_BEAR_HIDE, ITEM_JUNGLE_BEAR_HIDE)
    ..put(ITEM_HUNTER_TROPHY_FANG, ITEM_PANTHER_FANG)

let id1 = compiletime(attachments.get(ITEM_ELK_HIDE).getIDs())
let id2 = compiletime(attachments.get(ITEM_JUNGLE_WOLF_HIDE).getIDs())
let id3 = compiletime(attachments.get(ITEM_JUNGLE_BEAR_HIDE).getIDs())

@compiletime function createTrophyHideAbilityMS()
    new AbilityDefinitionMoveSpeedBonus(ABILITY_MOVESPEED_20)
    ..setMovementSpeedBonus(1, 20)
    //..setArtTarget((LocalItems.elkTrophyHide))
    ..setName("Increased movement sped by 20")

@compiletime function createDummyItem() returns ItemDefinition
    return createBasicItem(ITEM_HUNTER_TROPHY_HIDE_DUMMY)
            ..setName("Hunter's Trophy")
            ..setInterfaceIcon(LocalIcons.bTNTrophyHideDummy)
            //..setCanBeDropped(false)
            ..setTooltipExtended(TT_DUMMY_ITEM_EXTENDED)

@compiletime function createElkHideTrophy() returns ItemDefinition
    return createBasicItem(ITEM_HUNTER_TROPHY_ELK_HIDE)
            ..setName("Hunter's Trophy")
            ..setLumberCost(9)
            ..setAbilities(commaList(ABILITY_ELK_TROPHY_HIDE))
            ..setInterfaceIcon(LocalIcons.bTNElkTrophyHide)
            ..setTooltipExtended(TT_TROPHY+TT_ELK_TROPHY_HIDE)

@compiletime function createWolfHideTrophy() returns ItemDefinition
    return createBasicItem(ITEM_HUNTER_TROPHY_WOLF_HIDE)
            ..setName("Hunter's Trophy")
            ..setLumberCost(15)
            ..setAbilities(commaList(ABILITY_WOLF_TROPHY_HIDE))
            ..setInterfaceIcon(LocalIcons.bTNWolfTrophyHide)
            ..setTooltipExtended(TT_TROPHY+TT_WOLF_TROPHY_HIDE)

@compiletime function createBearHideTrophy() returns ItemDefinition
    return createBasicItem(ITEM_HUNTER_TROPHY_BEAR_HIDE)
            ..setName("Hunter's Trophy")
            ..setLumberCost(21)
            ..setAbilities(commaList(ABILITY_BEAR_TROPHY_HIDE))
            ..setInterfaceIcon(LocalIcons.bTNBearTrophyHide)
            ..setTooltipExtended(TT_TROPHY+TT_BEAR_TROPHY_HIDE)

@compiletime function createPantherFangTrophy() returns ItemDefinition
    return createBasicItem(ITEM_HUNTER_TROPHY_FANG)
            ..setName("Hunter's Trophy")
            ..setLumberCost(12)
            ..setAbilities(commaList(ABILITY_PANTHER_FANG_TROPHY))
            ..setInterfaceIcon(LocalIcons.bTNPantherFangTrophy)
            ..setTooltipExtended("A hunter's trophy weapon."+TT_PANTHER_FANG)

class TrophyHide
    unit hero = null
    item hunterDummyItem = null
    item trophyHide = null
    bool suspendTriggersFlag = false
    GatheringSlot gatheringSlot = null
    Attachment attachment

    construct(unit hero)
        this.hero = hero
        hunterDummyItem = createItem(ITEM_HUNTER_TROPHY_HIDE_DUMMY, hero.getPos())
        hunterDummyItem.setVisible(false)
        doAfter(1.) ->  
            gatheringSlot = gatheringSlotInstances.get(hero)
            
        nullTimer() ->            
            hero.addItemHandleToSlot(hunterDummyItem, 3)

    function updateDummySlot()
        suspendTriggersFlag = true
        if updateHides()
            nullTimer() ->   
                gatheringSlot.updateDummyItems()
                suspendTriggersFlag = false  
            return
        if hero.hasItem(hunterDummyItem)
            nullTimer() -> 
                suspendTriggersFlag = false     
                gatheringSlot.updateDummyItems()
            return
        suspendTriggersFlag = true        
        if hero.isInventoryFull()
        nullTimer() ->
            hero.addItemHandle(hunterDummyItem)
            doAfter(ANIMATION_PERIOD) ->  
                gatheringSlot.updateDummyItems()   
                suspendTriggersFlag = false  
            

    function onHideDrop()
        if suspendTriggersFlag == true
            return
        nullTimer() ->     
            hunterDummyItem.setVisible(false)
        suspendTriggersFlag = true
        replaceTrophyWithHide()
        nullTimer() ->
            updateDummySlot()          

    function updateHides() returns bool
        if trophyHide== null
        if hero.hasItem(trophyHide)
            return true
        let nextHide =  findNextHide()
        if nextHide != null
            replaceHideWithTrophy(nextHide)
            return true            
        return false


    //find next hide of highest index of HIDE_LIST
    function findNextHide() returns item            
        item nextHide = null
        for hide in TROPHY_BASE_LIST
            let foundHide = hero.getItemById(hide)
            if foundHide != null
                nextHide = foundHide
        return nextHide

    function replaceHideWithTrophy(item itemHandle)
        suspendTriggersFlag = true
        if itemHandle.getTypeId() == ITEM_HORN_MAMMOTH
            trophyHide = itemHandle
            hero.removeItem(hunterDummyItem) 
            nullTimer() ->
                hunterDummyItem.setVisible(false)
                //suspendTriggersFlag = false
            return
        let trophy= hideToTrophyMap.get(itemHandle.getTypeId())
        //updateAttachment(itemHandle.getTypeId())
        let slot = hero.getItemSlot(itemHandle)         
        itemHandle.remove()   
        trophyHide =createItem(trophy, hero.getPos())
        hero.removeItem(hunterDummyItem)    
        nullTimer() ->
            hunterDummyItem.setVisible(false)
            hero.addItemHandleToSlot(trophyHide, slot)
            //suspendTriggersFlag = false

    function updateAttachment(int newAttachment)
        if trophyHide != null
            attachment.remove(hero)
        nullTimer() ->                 
            if newAttachment != -1
                attachment = attachments.get(newAttachment)
                nullTimer() ->
                    if attachment!= null             
                        attachment.apply(hero)        

    function replaceTrophyWithHide()
        if trophyHide.getTypeId() == ITEM_HORN_MAMMOTH
            trophyHide = null
            return
        nullTimer() -> 
            let pos =trophyHide.getPos()
            if not trophyHide.isOwned()
                createItem(trophyToHideMap.get(trophyHide.getTypeId()), pos)
                trophyHide.remove()
                trophyHide = null
            //updateAttachment(-1)

    function onTargetOrder(item itemHandle)
        suspendTriggersFlag = true    
        hero.removeItem(hunterDummyItem)
        nullTimer() -> 
            hero.addItemHandle(itemHandle)
            hunterDummyItem.setVisible(false)
            suspendTriggersFlag = false
            updateDummySlot() 
            //replaceHideWithTrophy(itemHandle)



    ondestroy
        doAfter(ANIMATION_PERIOD) ->   
            let pos = hero.getPos()
            let itmId = trophyToHideMap.get(trophyHide.getTypeId())
            let itm = createItem(itmId, pos)
            hero.addItemHandle(itm)
            trophyHide.remove()
            hunterDummyItem.remove()
            //hunterDummyItem.remove()
            if attachment!= null
                destroy attachment        

function cacheAttachmentIds()
    attachments.get(ITEM_ELK_HIDE).setIDs(id1)
    attachments.get(ITEM_JUNGLE_WOLF_HIDE).setIDs(id2)
    attachments.get(ITEM_JUNGLE_BEAR_HIDE).setIDs(id3)

function onHideDrop(unit hero, item itemHandle)
    if (not trophyToHideMap.has(itemHandle.getTypeId())) and (itemHandle.getTypeId() != ITEM_HUNTER_TROPHY_HIDE_DUMMY) and (itemHandle.getTypeId() != ITEM_HORN_MAMMOTH)
        return    
    let instance = trophyHideInstances.get(hero)
    if instance == null
        return 
    if instance.suspendTriggersFlag == true    
        return
    nullTimer() ->        
        instance.onHideDrop()

function onHidePickup(unit hero, item itemHandle)
    let instance = trophyHideInstances.get(hero)
    if instance == null
        return
    if instance.suspendTriggersFlag == true
        return
    nullTimer() ->  
        instance.updateDummySlot()


function onTrophyPickup(unit hero, item itemHandle)
    if not trophyHideInstances.has(hero) or hero.hasItem(trophyHideInstances.get(hero).hunterDummyItem)
        let trophy = itemHandle.getTypeId()
        itemHandle.remove()
        nullTimer() ->
            let itmId =  trophyToHideMap.get(trophy)
            hero.addItemById(trophyToHideMap.get(trophy))
            

function onUnitEnter(unit troll)
    if not troll.getTypeId() == UNIT_HUNTER and not troll.getTypeId() == UNIT_TRACKER
        return
    let instance = trophyHideInstances.get(troll)
    if instance == null
        trophyHideInstances.put(troll, new TrophyHide(troll))
    else
        instance.updateDummySlot()

// initialize all hunters after hero draft is over
function onUnitLeave(unit u)
    let instance = trophyHideInstances.get(u)
    if instance == null
        return
    instance.onHideDrop()
        //destroy trophyHideInstances.getAndRemove(u)       


function initializeAttachmentsIds()
    attachments.get(ITEM_ELK_HIDE).setIDs(id1) 
    attachments.get(ITEM_JUNGLE_WOLF_HIDE).setIDs(id2)
    attachments.get(ITEM_JUNGLE_BEAR_HIDE).setIDs(id3)               


function onTargetOrder()
    let order = GetIssuedOrderId()
    let u = GetOrderedUnit()
    if order != Orders.smart or not u.isInventoryFull() or not trophyHideInstances.has(u)
        return
    let target = GetOrderTargetItem()
    let instance = trophyHideInstances.get(u)
    if instance == null
        return
    if not TROPHY_BASE_LIST.has(target.getTypeId())
        return
    // Smart pickup system -> simulate picking up meat like an item if full inventory, like in Bannars StackNSplit system
    // Used to pick up ammo even if inventory's full
    // TODO: Currently only work when troll is in pick up range, make it so the troll move toward ammo even if inventory is full
    if (target != null
        and target.isPickupable()
        and u.isInventoryFull()
        and u.hasItemById(ITEM_HUNTER_TROPHY_HIDE_DUMMY))
        let collisionSize = u.getCollisionSize()
        let rangeSq = (150.0 + collisionSize).pow(2)
        if u.getPos().distanceToSq(target.getPos()) <= rangeSq
            instance.onTargetOrder(target)


function onQuickMakePriorEffect(unit troll)            
    let instance = trophyHideInstances.get(troll)
    if instance == null
        return
    instance.suspendTriggersFlag = true

function onQuickMakeAfterEffect(unit troll)  
    let instance = trophyHideInstances.get(troll)
    if instance == null
        return
    instance.suspendTriggersFlag = false 
    doAfter(ANIMATION_PERIOD) ->
        instance.updateDummySlot() 
         

function onWarriorSub(unit troll)
    destroy trophyHideInstances.getAndRemove(troll)

init   
    registerQuickMakePriorEffect() (unit target, int unitID) ->
        onQuickMakePriorEffect(target)

    registerQuickMakeAfterEffect() (unit target, int unitID) ->
        onQuickMakeAfterEffect(target)    

    initializeAttachmentsIds()

    EventListener.add(EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER, () -> onTargetOrder())    

    EventListener.add(EVENT_PLAYER_UNIT_DEATH) -> 
        onUnitLeave(GetTriggerUnit()) 

    EventListener.add(EVENT_PLAYER_HERO_REVIVE_FINISH)->
        onUnitEnter(GetTriggerUnit())

    onEnter(()->onUnitEnter(getEnterLeaveUnit())) 

    EventListener.add(EVENT_PLAYER_UNIT_PICKUP_ITEM) ->
        if GetTriggerUnit().getTrollBaseClass() == UNIT_HUNTER and TROPHY_BASE_LIST.has(GetManipulatedItem().getTypeId())
            onHidePickup(GetTriggerUnit(), GetManipulatedItem())
  
    EventListener.add(EVENT_PLAYER_UNIT_DROP_ITEM) ->
        if GetTriggerUnit().getTrollBaseClass() == UNIT_HUNTER
            onHideDrop(GetTriggerUnit(), GetManipulatedItem())
    
    EventListener.add(EVENT_PLAYER_UNIT_PICKUP_ITEM) ->
        if TROPHY_LIST.has(GetManipulatedItem().getTypeId())
            onTrophyPickup(GetTriggerUnit(), GetManipulatedItem())  

    EventListener.onCast(ABILITY_WARRIOR) (unit caster) ->
        onWarriorSub(caster)
        