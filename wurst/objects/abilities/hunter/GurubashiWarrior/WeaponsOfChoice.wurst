package WeaponsOfChoice

// Standard library imports:
import Assets
import BuffObjEditing
import ChannelAbilityPreset
import ClosureEvents
import ClosureTimers
import HashMap
import LinkedList
import ItemObjEditing
import Items
import Cosmetics
import OnUnitEnterLeave
import Reflection

// Third-party imports:
import Lodash

// Local imports:
import ColorUtils
import LocalObjectIDs
import LocalAssets
import Classes
import IdListConstant
import InventoryEvent
import UnitExtensions
import Orders
import QuickMake
import AxesDefinition
import InstantDummyCaster
import DamageEvent
import CustomItemDefinition
import PlayerExtensions
import HashList
import AxeThrow
import ShieldThrow
import ShieldCharge
import EquipmentSlots
import Transformation
import WhirlingAxes


public HashMap<unit, WeaponsOfChoice> weaponsOfChoiceInstances = new HashMap<unit, WeaponsOfChoice>()
let TT_WEAPONS_OF_CHOICE = "Gurubashi Warrior gains different abilitites depending on weapons he has equipped:\n"+
                            "\n{0} - Axe Throw".format("One-handed axe".color(COLOR_GOLD_STR))+
                            "\n{0} - Whirlwind".format("Two-handed axe".color(COLOR_GOLD_STR))+
                            "\n{0} - Shield Charge, replaces Spiked Net".format("Shield".color(COLOR_GOLD_STR))+
                            "\n{0} - Empowered Axe Throw, Whirling Axes; replaces Spiked Net".format("Two weapons".color(COLOR_GOLD_STR))

HashList<int> weaponsOfChoiceAbilitites = new HashList<int>()
    ..add(ABILITY_AXE_THROW)
    ..add(ABILITY_WHIRLWIND)
    ..add(ABILITY_SPIKED_NET)
    ..add(ABILITY_WARRIOR_SHIELD_CHARGE)
    ..add(ABILITY_AXE_THROW_DW)
    ..add(ABILITY_WHIRLING_AXES)
    ..add(ABILITY_WEAPONS_OF_CHOICE)

@compiletime function createTitansGripAbility()
    new AbilityDefinitionMoveSpeedBonus(ABILITY_TITANS_GRIP)
        ..setMovementSpeedBonus(1, 0)
        ..setItemAbility(true)
        ..setName("Titan's Grip")
        ..setEditorSuffix("(Wurst)")

public let ABILITY_TITANS_GRIP_BUFF = compiletime(
    createDummyBuffObject(
        "Titan's Grip".color(COLOR_GREEN),
        "Allows you to use two-handed weapons in one hand",
        Icons.pASBTNSeaGiantPulverize
    ).abilId
)

@compiletime function createNightStalkerDummyAbility()
    new AbilityDefinitionEvasion(ABILITY_WEAPONS_OF_CHOICE)
        ..setChancetoEvade(1, 0.)
        ..setLevels(1)
        ..presetButtonPosNormal(3, 2)
        ..setTooltipNormal(1, "Weapons of Choice")
        ..setIconNormal(LocalIcons.pASBTNWeaponsOfChoice)
        ..setTooltipLearn("Weapons of Choice")
        ..setTooltipLearnExtended(TT_WEAPONS_OF_CHOICE)
        ..setTooltipNormalExtended(1, TT_WEAPONS_OF_CHOICE)

public class WeaponsOfChoice
    unit troll
    real attackDamage
    bool isSuperSub
    AxeThrow axeThrowInstance
    LinkedList<item> inventory
    IterableMap<int, bool> abilities = new IterableMap<int, bool>()

    construct(unit troll)
        this.troll = troll
        axeThrowInstance = new AxeThrow(troll, this)
        axeThrowInstances.put(troll, new AxeThrow(troll, this))
        nullTimer() ->
            initializeAbilityMap()
            updateAbilities()          

    function initializeAbilityMap()
        for abilId in weaponsOfChoiceAbilitites
            abilities.put(abilId, false)
            troll.disableAbility(abilId, true, true)


    function updateAbilities()
        resetAbilities()
        updateAbilityMap()
        for abilId in abilities
            if abilities.get(abilId) == true
                troll.disableAbility(abilId, false, false)

    function resetAbilities()
        for abilId in abilities
            if abilities.get(abilId) == true
                abilities.put(abilId, false)
                troll.disableAbility(abilId, true, true)

    function updateAbilityMap()
        inventory = troll.getInventory()
        let equippedItems = troll.getOwner().getEquippedItems()
        inventory.addAll(equippedItems)
        
        abilities.put(ABILITY_SPIKED_NET, true)        
        if hasAxe()
           // print("hasAxe")
            abilities.put(ABILITY_SPIKED_NET, true)
            abilities.put(ABILITY_AXE_THROW, true)

        if hasTwoHandedWeapon()
           // print("has 2h")
            abilities.put(ABILITY_WHIRLWIND, true)
            abilities.put(ABILITY_SPIKED_NET, true)
            if not isSuperSub   
                abilities.put(ABILITY_AXE_THROW, false)
            else
                //print("supersub")
                abilities.put(ABILITY_AXE_THROW, true)

        if isDualWielding()
            //print("dualWielding")
            abilities.put(ABILITY_SPIKED_NET, false)
            abilities.put(ABILITY_AXE_THROW, false)
            abilities.put(ABILITY_AXE_THROW_DW, true)
            abilities.put(ABILITY_WHIRLING_AXES, true)

        if hasShield()
            //print("hasShield")
            abilities.put(ABILITY_SPIKED_NET, false)
            abilities.put(ABILITY_WARRIOR_SHIELD_CHARGE, true)

        //if not isSuperSub
        //    abilities.put(ABILITY_WEAPONS_OF_CHOICE, true)

        int count = 0
        for each in abilities
            if abilities.get(each) == true
                count+=1
        if count <3
            abilities.put(ABILITY_WEAPONS_OF_CHOICE, true)            

        destroy inventory
        destroy equippedItems


    function isDualWielding() returns bool
        int axeCount = 0
        for each in inventory
            if AXE_LIST.has(each.getTypeId())
                axeCount+=1
                if axeCount >=2
                    return true
        return false

    function hasTwoHandedWeapon() returns bool
        for each in inventory
            if TWO_HANDED_WEAPON_LIST.has(each.getTypeId())
                return true
        return false

    function hasShield() returns bool
        for each in inventory
            if SHIELD_LIST.has(each.getTypeId())
                return true
        return false

    function hasAxe() returns bool
        for each in inventory
            if AXE_LIST.has(each.getTypeId())
                return true        
        return false

    function onSuperSub()
        troll.addAbility(ABILITY_TITANS_GRIP_BUFF)
        troll.makeAbilityPermanent(ABILITY_TITANS_GRIP_BUFF, true)
        isSuperSub = true
        nullTimer() -> 
            updateAbilities()

    function updateDamage()
        var itemsDamageBonus =0
        let inventory = troll.getInventory()
        let equippedItems = troll.getOwner().getEquipmentSlots().currentItems
        for each in equippedItems
            let damageBonus = customItemDefinitions.get(equippedItems.get(each).getTypeId()).damageBonus
            itemsDamageBonus+=damageBonus
        for each in inventory
            let damageBonus = customItemDefinitions.get(each.getTypeId()).damageBonus
            itemsDamageBonus+=damageBonus
        attackDamage = (troll.getBaseDamage(0)+itemsDamageBonus).toReal()
        destroy inventory

    function getAttackDamage() returns real
        updateDamage()
        return attackDamage

function onSub(unit caster)
    let instance = weaponsOfChoiceInstances.get(caster)
    if instance != null
        return
    weaponsOfChoiceInstances.put(caster, new WeaponsOfChoice(caster))

function onSuperSub(unit caster)
    if caster.getTypeId() != UNIT_JUGGERNAUT
        return
    let instance = weaponsOfChoiceInstances.get(caster)
    if instance == null
        return
    instance.onSuperSub()

function updateItems(unit troll, item itm)
    if not EQUIPMENT_LIST.has(itm.getTypeId()) and not itm.getTypeId() == ITEM_HUNTER_TROPHY_FANG
        return
    let instance = weaponsOfChoiceInstances.get(troll)
    if instance == null
        return
    instance.updateAbilities()

function onRevive(unit troll)
    let instance = weaponsOfChoiceInstances.get(troll)
    if instance == null
        return
    instance.updateAbilities()


init
    EventListener.onCast(ABILITY_WARRIOR) (unit caster) ->
        onSub(caster)

    EventListener.add(EVENT_PLAYER_UNIT_PICKUP_ITEM) -> 
        updateItems(GetManipulatingUnit(), GetManipulatedItem())

    EventListener.add(EVENT_PLAYER_HERO_REVIVE_FINISH) ->
        onRevive(GetTriggerUnit())

    registerOnEquipEvent(EQUIPMENT_CALLBACK_ANY) (unit troll, item itm) ->                  
        updateItems(troll, itm) 

    registerAfterEffect() (unit target, int unitID) ->
        onSuperSub(target)

    EventListener.add(EVENT_PLAYER_UNIT_DROP_ITEM) ->
        let u = GetManipulatingUnit()
        let itm = GetManipulatedItem()
        nullTimer() -> 
            updateItems(u, itm) 

    registerOnUnequipEvent(EQUIPMENT_CALLBACK_ANY) (unit troll, item itm) ->                  
        updateItems(troll, itm)        