package Whirlwind

// Standard library imports:
import Assets
import BuffObjEditing
import ChannelAbilityPreset
import ClosureEvents
import ClosureTimers
import HashMap
import LinkedList
import ItemObjEditing
import Items
import Cosmetics
import OnUnitEnterLeave
import Reflection

// Third-party imports:
import Lodash

// Local imports:
import ColorUtils
import LocalObjectIDs
import LocalAssets
import Classes
import IdListConstant
import InventoryEvent
import UnitExtensions
import Orders
import QuickMake
import AxesDefinition
import ClosureForGroups
import WeaponsOfChoice
import ToolTipsUtils

let CD = 45.
let AOE = 350.
let DAMAGE_INTERVAL = 0.125
let DURATION = 3.
let DAMAGE_PER_SECOND_MULTIPLIER = 0.8
let MANACOST = 35
public let TT_WHIRLWIND_NAME = "Whirlwind"
public let TT_WHIRLWIND_EXT = "Deal {0} attack damage per second to enemies in {1} radius.".format((DAMAGE_PER_SECOND_MULTIPLIER.toString()+"x").color(COLOR_RED), AOE.toToolTipLightBlue())+
                              " Lasts for {0} seconds".format(DURATION.toToolTipLightBlue())+
                              "\nYou are immune to spells during effect."+
                              "\nHas {0} seconds cooldown.".format(CD.toToolTipLightBlue())



@compiletime function createStealMeatAbility()
    new AbilityDefinitionBladeMasterBladestorm(ABILITY_WHIRLWIND)
        ..presetTooltipNormal(lvl -> TT_WHIRLWIND_NAME)
        ..presetTooltipNormalExtended(lvl-> TT_WHIRLWIND_EXT)
        ..presetDurationHero(lvl->3.)
        ..presetDurationNormal(lvl->3.)
        ..presetAreaofEffect(lvl->AOE)
        ..presetMagicDamageReduction(lvl -> 1.0)
        ..presetCooldown(lvl -> CD)
        ..presetHotkey("W")
        ..presetManaCost(lvl->MANACOST)
        ..presetDamagePerSecond(lvl->0)
        ..setButtonPositionNormalX(2)
        ..setButtonPositionNormalY(1)
        ..presetTargetsAllowed(lvl ->commaList(
            TargetsAllowed.ground,
            TargetsAllowed.enemies,
            TargetsAllowed.vulnerable,
            TargetsAllowed.alive,
            TargetsAllowed.organic,
            TargetsAllowed.neutral,
            TargetsAllowed.air
        )) 


function onCast(unit caster)
    let pos = caster.getPos()
    let efx = addEffect(LocalAbilities.bladeStorm, pos)
    doPeriodicallyTimed(ANIMATION_PERIOD, DURATION) (CallbackCounted cb) ->
        efx.setPos(caster.getPos())
        if cb.isLast()
            efx.setPos(vec2(-9999., -9999.))       
    let instance = weaponsOfChoiceInstances.get(caster)
    let attackDamage = instance.getAttackDamage()
    let damagePerTick = attackDamage*DAMAGE_INTERVAL*DAMAGE_PER_SECOND_MULTIPLIER
    doPeriodicallyTimed(DAMAGE_INTERVAL, DURATION) (CallbackCounted cb) ->    
        forUnitsInRange(caster.getPos(), AOE) (unit u) ->
            //print(damagePerTick)
            if u.isAlive() and not u.isAllyOf(caster.getOwner())
                caster.damageTarget(u, damagePerTick, false, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_POISON, null)


init
    EventListener.onCast(ABILITY_WHIRLWIND) (unit caster) ->
        onCast(caster)        
