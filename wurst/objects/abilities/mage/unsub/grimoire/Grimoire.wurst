package Grimoire
import Classes
import LocalObjectIDs
import HashMap
import OnUnitEnterLeave
import Items
import LocalAssets
import Icons
import ObjectIds
import AbilityObjEditing
import UnitExtensions
import InstantDummyCaster
import ChannelAbilityPreset
import Orders
import RegisterEvents
import ScrollSpells
import ToolTipsUtils
import ClosureEvents
import SimError
import Abilities
import ClosureTimers
import ColorUtils
import QuickMake
import InventoryEvent
import GameTimer

let INT_BONUS_PER_SCROLL = 2
let GRIMOIRE_INT_BONUS_TT = "Pages collected in your Grimoire increase your {0} by ".format("Intelligence".color(COLOR_TURQUOISE))
let GRIMOIRE_TT ="Mage can add a scroll to its Grimoire permanently gaining it's powers. \n\nMage gains {0} {1} per page added to the Grimoire.".format(
    INT_BONUS_PER_SCROLL.toString().color(COLOR_GREEN), "Intelligence".color(COLOR_TURQUOISE))

@compiletime function createAbilityIntBonus()
    new AbilityDefinitionAttributeModifierSkill(ABILITY_GRIMOIRE_INT_BONUS)
        ..presetHideButton(lvl->false)
        ..setIconNormal(Icons.bTNNecromancerMaster)
        ..setLevels(8)
        ..presetIntelligenceBonus(lvl->(lvl-1)*INT_BONUS_PER_SCROLL)
        ..presetStrengthBonus(lvl->0)
        ..presetAgilityBonus(lvl->0)
        ..setName("Acquired Knowlede")
        ..setTooltipNormal(1, "Acquired Knowlede")
        ..presetTooltipNormalExtended(lvl->GRIMOIRE_INT_BONUS_TT+(INT_BONUS_PER_SCROLL*(lvl-1)).toString().color(COLOR_GREEN))
        ..setTooltipNormalExtended(1, GRIMOIRE_TT)
        ..setEditorSuffix("(Wurst)")


@compiletime function createGrimoireAbilities()
    new AbilityDefinitionSpellBook(ABILITY_GRIMOIRE_SPELLBOOK)
        ..setName("Mage's Grimoire")
        ..setHeroAbility(true)
        ..setSpellList(1, commaList(GRIMOIRE_SPELL_LIST))
        ..setItemAbility(true)
        ..setLevels(1)
        ..presetMaximumSpells(lvl -> 11)
        ..presetMinimumSpells(lvl -> 11)
        ..presetCooldown(lvl -> 10)
        ..setSharedSpellCooldown(1, false)
        ..setCooldown(1, 10)
        ..presetBaseOrderID(lvl -> "unsummon")


@compiletime function createGrimmoire()
    createUsableItem(ITEM_MAGE_GRIMOIRE)
        ..setAbilities(ABILITY_GRIMOIRE_SPELLBOOK.toRawCode())
        ..setDescription("Mage's Grimoire.")
        ..setInterfaceIcon(Icons.bTNNecromancerMaster)
        ..setLumberCost(100)
        ..setName("Mage's Grimoire")
        ..setCanBeSoldToMerchants(false)
        ..setTooltipBasic("Mage's Grimmoire")
        ..setTooltipExtended(GRIMOIRE_TT)
        ..setCooldownGroup(ABILITY_GRIMOIRE_SPELLBOOK.toRawCode())
        //..setCanBeDropped(false)


@compiletime function createAddScrollAbility()
    new ChannelAbilityPreset(ABILITY_GRIMOIRE_ADD_SCROLL, 1, true)
        ..presetCastingTime(lvl-> 0)
        ..presetManaCost(lvl -> 0)
        ..presetCooldown(lvl -> 1.0)
        ..setHeroAbility(true)
        ..setHotkeyNormal("Z")
        ..presetBaseOrderID(lvl->"healingspray")
        ..setName("Add a scroll to your Grimoire")
        ..presetTooltipNormal(lvl -> makeToolTipNorm("Z", "Permanently add a scroll to your Grimoire"))
        ..presetTooltipNormalExtended(lvl -> "Add a scroll to your Grimoire")
        ..setIconNormal(Icons.bTNSpellSteal)
        ..setIconResearch(Icons.bTNSpellSteal)
        ..setIconTurnOff(Icons.bTNSpellSteal)
        ..setButtonPositionNormalX(2)
        ..setButtonPositionNormalY(0)
        ..setFollowThroughTime(1, 0)
        ..setEditorSuffix("(Wurst)")


IterableMap<int, int> scrollSpells = new IterableMap<int, int>()
..put(ITEM_SCROLL_ENTANGLING_ROOTS, ABILITY_ROOT_CAST)
..put(ITEM_SCROLL_FIREBALL, ABILITY_FIREBOLT)
..put(ITEM_SCROLL_STONE_ARMOR, ABILITY_FROST_ARMOR)
..put(ITEM_SCROLL_LIVING_DEAD, ABILITY_SKELETAL_MINION)
..put(ITEM_SCROLL_TSUNAMI, ABILITY_TSUNAMI)
..put(ITEM_SCROLL_HASTE, ABILITY_HASTE_AOE)
..put(ITEM_SCROLL_CYCLONE, ABILITY_CYCLONE)

IterableMap<int, int> scrolls = new IterableMap<int, int>()
..put(ITEM_SCROLL_ENTANGLING_ROOTS, ABILITY_GRIMOIRE_ENTANGLE)
..put(ITEM_SCROLL_FIREBALL, ABILITY_GRIMOIRE_FIREBALL)
..put(ITEM_SCROLL_STONE_ARMOR, ABILITY_GRIMOIRE_STONE_ARMOR)
..put(ITEM_SCROLL_LIVING_DEAD, ABILITY_GRIMOIRE_LIVING_DEAD)
..put(ITEM_SCROLL_TSUNAMI, ABILITY_GRIMOIRE_TSUNAMI)
..put(ITEM_SCROLL_HASTE, ABILITY_GRIMOIRE_HASTE_SCROLL)
..put(ITEM_SCROLL_CYCLONE, ABILITY_GRIMOIRE_CYCLONE_SCROLL)

public constant TARGETS_ALLOWED = commaList(
                                TargetsAllowed.air,
                                TargetsAllowed.enemies,
                                TargetsAllowed.ground,
                                TargetsAllowed.organic
                                )

IterableMap<unit, Grimoire> instances = new IterableMap<unit, Grimoire>()

class Grimoire
    unit hero = null
    item grimoire
    int currentIntBonusLvl = 0
    bool suspendTriggersFlag = false
    IterableMap<int, int> lockedScrolls
    IterableMap<int, real> spellCastTimeStamps = new IterableMap<int, real>()    

    construct(unit hero)
        this.hero = hero
        this.lockedScrolls = scrolls.copy()
        grimoire = createItem(ITEM_MAGE_GRIMOIRE, hero.getPos())
        hero.addItemHandleToSlot(grimoire, 3)
        instances.put(hero, this)
        lockSpells()

    function lockSpells()
        for key in lockedScrolls
            let spell = lockedScrolls.get(key)
            if spell != ABILITY_GRIMOIRE_ADD_SCROLL
                hero.disableAbility(spell, true, false)           

    function onCast()
        for scroll in scrolls
            if hero.hasItemById(scroll)
                let abilId = lockedScrolls.getAndRemove(scroll)
                if abilId ==0
                    simError(hero.getOwner(), "You already have this scroll in your Grimoire.")
                else          
                    hero.disableAbility(abilId, false, false)
                    currentIntBonusLvl+=1
                    updateIntBonus()
                    let itm = hero.getItemById(scroll)
                    flashEffect(Abilities.tomeOfRetrainingCaster, hero.getPos())
                    itm.remove()

    function recordCastTimeStamp(int abilId)
        let abilCd = hero.getAbilityCooldownRemaining(abilId)
        spellCastTimeStamps.put(abilId, getElapsedGameTime())
        doAfter(abilCd) ->
            spellCastTimeStamps.remove(abilId) 
            
    function updatedCooldownds()
        for abilId in GRIMOIRE_SPELL_LIST
            if spellCastTimeStamps.has(abilId)
                let defaultCd = hero.getAbilityCooldown(abilId, 0)
                let remainingCd = defaultCd-(getElapsedGameTime()-spellCastTimeStamps.get(abilId))
                hero.startAbilityCooldown(abilId, remainingCd)     


    function updateIntBonus()  
        hero.setAbilityLevel(ABILITY_GRIMOIRE_INT_BONUS, currentIntBonusLvl+1)
    
    function addGrimoire()
        suspendTriggersFlag = true        
        if hero.hasItem(grimoire)
            resetGrimoire()
            suspendTriggersFlag = false
            return

        nullTimer() ->
            if hero.isInventoryFull()
                let itm = hero.itemInSlot(3)
                hero.dropItemSlot(itm, 3)
                nullTimer() ->   
                    hero.addItemHandle(grimoire)
            else
                nullTimer() ->   
                    hero.addItemHandle(grimoire)     
            suspendTriggersFlag = false
            nullTimer() -> 
                lockSpells()
                updateIntBonus()
                nullTimer() -> 
                    updatedCooldownds()


    function onGrimoireDrop()
        nullTimer() -> 
            grimoire.setVisible(false)
        addGrimoire()

    function resetGrimoire()
        suspendTriggersFlag = true
        let slot = hero.getItemSlot(grimoire)  
        hero.removeItem(grimoire)
        let itm = hero.itemInSlot(slot) 
        if itm != null
            hero.removeItem(itm)     
        grimoire.setVisible(false)
        nullTimer() -> 
            hero.addItemHandleToSlot(grimoire, slot)
            nullTimer() -> 
                lockSpells()
                updateIntBonus()
                doAfter(ANIMATION_PERIOD) -> 
                    updatedCooldownds()
        suspendTriggersFlag = false        
                     




    ondestroy
        instances.remove(hero)


function onUnitEnter(unit troll)
    if not troll.getTrollBaseClass() == UNIT_MAGE
        return
    let instance = instances.get(troll)
    if instance == null
        instances.put(troll, new Grimoire(troll))
        return           
    else
        if not troll.isAlive()
            return
        instance.addGrimoire()


function onAddScroll(unit caster)
    let instance = instances.get(caster)
    if instance == null
        return
    instance.onCast()

function onGrimoireDrop(unit hero)   
    let instance = instances.get(hero)
    if instance == null
        return
    if instance.suspendTriggersFlag == true
        return         
    nullTimer() ->  
        instance.onGrimoireDrop()

function onScrollPickup(unit troll, item itm)
    if GetTriggerUnit().getTrollBaseClass() == UNIT_MAGE
        let instance = instances.get(troll)
        if instance == null
            return
        for scroll in scrollSpells
            if scroll == itm.getTypeId() 
                if not instance.lockedScrolls.has(scroll)
                    let abilId = scrollSpells.get(scroll)
                    itm.removeAbility(abilId)

function onScrollDrop(unit troll, item itm)
    for scroll in scrollSpells
        if scroll == itm.getTypeId()
            let abilId = scrollSpells.get(scroll)
            itm.addAbility(abilId)

function onQuickMakePriorEffect(unit troll)            
    let instance = instances.get(troll)
    if instance == null
        return
    instance.suspendTriggersFlag = true

function onQuickMakeAfterEffect(unit troll)  
    let instance = instances.get(troll)
    if instance == null
        return
    instance.suspendTriggersFlag = false  
    instance.addGrimoire()  

function onScrollCast(unit troll, int abilId)
    let instance = instances.get(troll)
    if instances == null
        return
    if GRIMOIRE_SPELL_LIST.has(abilId)
        nullTimer() -> 
            //print("onScrollCast")
            instance.recordCastTimeStamp(abilId)

function onMoved()
    let slotFrom = getInventorySlotFrom()
    let slotTo = getInventorySlotTo()
    let troll = getInventoryManipulatingUnit()
    let instance = instances.get(troll)
    if instance == null
        return
    // Moving an item in place does not lock spellbooks.
    if slotFrom == slotTo
        return

    // Reset each item, as necessary.
    nullTimer() -> 
        instance.resetGrimoire()

init
    /*
    registerInventoryEvent(EVENT_ITEM_INVENTORY.MOVE, () -> onMoved())

    registerQuickMakePriorEffect() (unit target, int unitID) ->
        onQuickMakePriorEffect(target)

    registerQuickMakeAfterEffect() (unit target, int unitID) ->
        onQuickMakeAfterEffect(target)

    onEnter(()->onUnitEnter(getEnterLeaveUnit()))

    EventListener.onCast(ABILITY_GRIMOIRE_ADD_SCROLL) (unit caster) ->
        onAddScroll(caster)

    EventListener.add(EVENT_PLAYER_HERO_REVIVE_FINISH)->
        onUnitEnter(GetTriggerUnit())

    EventListener.add(EVENT_PLAYER_UNIT_DROP_ITEM) ->
        if GetTriggerUnit().getTrollBaseClass() == UNIT_MAGE and GetManipulatedItem().getTypeId() == ITEM_MAGE_GRIMOIRE
            onGrimoireDrop(GetTriggerUnit())

    EventListener.add(EVENT_PLAYER_UNIT_DROP_ITEM) ->
        if GetTriggerUnit().getTrollBaseClass() == UNIT_MAGE
            onScrollDrop(GetManipulatingUnit(), GetManipulatedItem())

    EventListener.add(EVENT_PLAYER_UNIT_PICKUP_ITEM) ->
        onScrollPickup(GetManipulatingUnit(), GetManipulatedItem())

    EventListener.add(EVENT_PLAYER_UNIT_SPELL_EFFECT) ->
        onScrollCast(GetTriggerUnit(), GetSpellAbilityId()) 
    */
            


