package MentalQuickness

// Standard-library imports:
import Assets
import BuffObjEditing
import ClosureTimers
import ClosureEvents
import ClosureForGroups
import ChannelAbilityPreset
import GroupUtils
import HashMap
import HashSet
import InstantDummyCaster
import OnUnitEnterLeave
import OrderIds

// Third-party imports:
import Lodash

// Local imports:
import LocalObjectIDs
import ToolTipsUtils
import UnitExtensions
import DamageListeners
import HealingSystem
import ThiefsPocket
import ColorUtils
import LinkedList
import LocalAssets
import BeeHives

let cooldownRecoveryBonus = 0.02
let TT_NAME = "Mental quickness."
let TT_TOOLTIP = "Telethief's mental prowess allows him to use his abilities and items from dimentional pocket more often."+
                "\n\nGain {0}% Cooldown Recovery speed per {1}".format(
                    (cooldownRecoveryBonus*100).toString().color(COLOR_LIGHT_BLUE),
                    "Intelligence".color(COLOR_TURQUOISE)
                )+
                "\n\nDoes not affect Cloak or Blink".color(COLOR_GOLD_STR)

let IGNORED_ABILITY_LIST = asList(ABILITY_PANIC, ABILITY_CLOAK, ABILITY_BLINK)

@compiletime function createMentalQuicknessDummyAbility() returns AbilityDefinitionHardenedSkin
    return new AbilityDefinitionHardenedSkin(ABILITY_MENTAL_QUICKNESS)
        ..setIconNormal(LocalIcons.bTNContortionist)
        ..setButtonPositionNormalY(1)
        ..setCheckDependencies(false)
        ..setChancetoReduceDamage(1, 0)
        ..setIgnoredDamage(1, 0.)
        ..setMinimumDamage(1, 0.)
        ..setEditorSuffix("(Wurst)")
        ..setHotkeyNormal("")
        ..setName(TT_NAME)
        ..setRequirements("")
        ..setTooltipNormal(1, TT_NAME)
        ..setTooltipNormalExtended(1, TT_TOOLTIP)

function onCast(unit caster, int abilId)
    if not (caster.getTypeId() == UNIT_TELETHIEF or caster.getTypeId() == UNIT_ASSASSIN)
        return
    if IGNORED_ABILITY_LIST.has(abilId)
        return
    let cooldown= caster.getAbilityCooldown(abilId, 0)
    doAfter(ANIMATION_PERIOD) -> 
        let cooldownRecovery = max((caster.getInt(true)), 0)*cooldownRecoveryBonus+1
        caster.startAbilityCooldown(abilId, cooldown/cooldownRecovery)
        nullTimer() ->
            caster.startAbilityCooldown(abilId, cooldown/cooldownRecovery)
            
init
    EventListener.add(EVENT_PLAYER_UNIT_SPELL_ENDCAST) ->
        onCast(GetSpellAbilityUnit(), GetSpellAbilityId())     
    /*
    EventListener.onCast(ABILITY_DIMENTIONAL_POCKET) (unit caster) ->
        onCast(caster, ABILITY_DIMENTIONAL_POCKET)

    EventListener.onCast(ABILITY_TELE_STEAL) (unit caster) ->
        onCast(caster, ABILITY_TELE_STEAL)        

    EventListener.onCast(ABILITY_TELE_FEED) (unit caster) ->
        onCast(caster, ABILITY_TELE_FEED)         
        
    EventListener.onCast(ABILITY_TELE_STEAL_FOOD) (unit caster) ->
        onCast(caster, ABILITY_TELE_STEAL_FOOD)

    EventListener.onCast(ABILITY_NETHER_POTION_BANISH) (unit caster) ->
        onCast(caster, ABILITY_NETHER_POTION_BANISH)        

    EventListener.onCast(ABILITY_DRUNK_POTION) (unit caster) ->
        onCast(caster, ABILITY_DRUNK_POTION)                     

    EventListener.onCast(ABILITY_DRUNK_POTION) (unit caster) ->
        onCast(caster, ABILITY_DRUNK_POTION)   

    EventListener.onCast(ABIL_BEE_FACTORY) (unit caster) ->
        onCast(caster, ABIL_BEE_FACTORY)  
    */

        
              