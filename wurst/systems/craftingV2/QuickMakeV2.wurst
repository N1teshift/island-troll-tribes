package QuickMakeV2

// Standard library imports:
import LinkedList
import HashMap
import ClosureTimers


// Local imports:
import ClosuresForItems
import LocalObjectIDs
import IdListConstant
import UnitExtensions
import HashList
import ItemRecipeV2
import initlater CustomItemDefinition
import PlayerExtensions
import initlater EquipmentSlots
import EquipmentSlotFrames
import GatheringSlot

public HashMap<int, QuickMakeV2> quickMakes  = new HashMap<int, QuickMakeV2>()
public let BUILDING_CRAFTING_AOE = 900.
let QM_SUCCESS_CD = 15.
let MESSAGE_MISSING_UNIT_REQUIRED = "Missing required building: "
let MESSAGE_DURATION = 10.
public HashList<int> baseItems  = new HashList<int>()


public class QuickMakeV2
    static item baseItem
    //static unit baseItemOwner
    int itemId
    int abilId
    unit caster
    unit baseItemOwner = null
    item craftedItem = null
    int unitRequirementId = 0
    boolean isCraftFailed = false
    boolean isItemEquipped = false
    rect searchSpace
    group unitsInRadius
    QuickMakeV2 parentInstance = null
    ItemRecipe itemRecipe
    //itemCharges
    HashList<item> cashedItems
    HashList<item> cashedOwnedItems
    HashList<int> missingRequiredBuildings
    HashList<int> itemsUsedInRecipe
    IterableMap<int, int> missingItemsCountMap
    IterableMap<item, QuickMakeV2> foundItems = new IterableMap<item, QuickMakeV2>()
    HashList<item> ignoredOwnedItems = new HashList<item>()

    construct(int itemId, unit caster, int abilId)
        this.itemId = itemId
        this.caster = caster
        this.abilId = abilId
        cashedItems = new HashList<item>()
        cashedOwnedItems = new HashList<item>()
        missingItemsCountMap = new IterableMap<int, int>()
        missingRequiredBuildings = new HashList<int>()
        //itemsUsedInRecipe = new HashList<int>()
        initialize()

    construct(int itemId, unit caster, QuickMakeV2 parentInstance)
        this.itemId = itemId
        this.caster = caster
        this.parentInstance = parentInstance
        this.cashedItems = parentInstance.cashedItems
        this.cashedOwnedItems = parentInstance.cashedOwnedItems
        this.missingItemsCountMap = parentInstance.missingItemsCountMap
        this.missingRequiredBuildings = parentInstance.missingRequiredBuildings
        initialize()

    function initialize() 
        itemRecipe = customItemDefinitions.get(itemId).recipe 
        if parentInstance == null       
            cashItems()                   
        quickMakes.put(itemId, this)
        //print("crafting "+GetObjectName(itemId))    
        unitRequirementId = itemRecipe.unitRequirementId  

    function generateItemsUsedList(HashList<int> list)
        list.add(itemRecipe.itemId)
        for each in list
            //print("iterating over item "+GetObjectName(each))
            let itemRecipe = customItemDefinitions.get(each).recipe
            if itemRecipe.isCrafted
                generateItemsUsedList(itemRecipe.ingredients)
            else
                if not itemsUsedInRecipe.has(each)
                    //print("adding item "+GetObjectName(each)+" to the list")
                    itemsUsedInRecipe.add(each)            

    function findBaseItemOwner(item whichItem) returns unit 
        let players = caster.getOwner().getTribe().getMembers()
        for each in players
            let troll = each.getTroll()
            if troll.hasItem(whichItem)
                return troll
        return null

    function cashItems()
        //generateItemsUsedList(itemRecipe.ingredients)
        //for each in itemsUsedInRecipe
        //    print(GetObjectName(each))
        let pos = caster.getPos()
        searchSpace = Rect(pos.x - BUILDING_CRAFTING_AOE, pos.y - BUILDING_CRAFTING_AOE, pos.x + BUILDING_CRAFTING_AOE, pos.y + BUILDING_CRAFTING_AOE)
        forItemsInRect(searchSpace) (item i) ->
            if true //itemsUsedInRecipe.has(i.getTypeId())
                cashedItems.add(i)
        unitsInRadius = CreateGroup()
            ..enumUnitsInRange(caster.getPos(), BUILDING_CRAFTING_AOE)
        for u in unitsInRadius
            if u.isAllyOf(caster.getOwner()) or u.getOwner() == caster.getOwner()
                let inventory = u.getInventory()
                for each in inventory
                    if each != null   // and itemsUsedInRecipe.has(each.getTypeId())
                        cashedOwnedItems.add(each)
                destroy inventory 

    function generateMissingItemsMessage() returns string
        if missingItemsCountMap.size() == 0
            return null
        var missingItems = "Missing resources to craft {0}:\n".format(GetObjectName(itemId))
        for each in missingItemsCountMap
            let count = missingItemsCountMap.get(each)
            missingItems+="{0}x {1}\n".format(count.toString(), GetObjectName(each))
        return missingItems

    function generateMissingBuildingsMessage() returns string
        if missingRequiredBuildings.size() == 0
            return null
        var missingBuildings = "Missing buildings required to craft {0}:\n".format(GetObjectName(itemId))
        for each in missingRequiredBuildings
            missingBuildings+="{0}\n".format(GetObjectName(each))
        missingBuildings+="\n"
        return missingBuildings        

    function craftItem(unit caster) returns item
        if not assertUnitRequirement()
            printToTeam(MESSAGE_MISSING_UNIT_REQUIRED+GetObjectName(unitRequirementId))
            isCraftFailed = true

        for each in itemRecipe.ingredients
            //print("next ingredient is "+GetObjectName(each))
            let found = findNextIngredient(each)
            if found == null
                isCraftFailed = true

        if isCraftFailed == true
            onFailure()
            return null
        craftedItem = createItem(itemId, caster.getPos())
        craftedItem.setVisible(false)
        if parentInstance == null
            onSuccess()        
        return craftedItem         


    function findNextIngredient(int ingredient) returns item          
        item found = null
        found = findIngredientInInventories(ingredient)
        if found == null
            found = findIngredientInRect(ingredient)
        if found != null
            if baseItems.has(found.getTypeId())
                baseItem = found
                if baseItemOwner == null
                    baseItemOwner = findBaseItemOwner(found)
            foundItems.put(found, null)
            found.setVisible(false)  
        if found == null
            found = craftIngredient(ingredient)
            if found == null
                //print("missing ingredient "+GetObjectName(ingredient)+" to craft "+GetObjectName(itemId))
                return null
            //print("have enough ingredients to craft "+GetObjectName(found.getTypeId()))                   
        return found

    function findEquippedBaseItem(int itemId) returns item
        for u in unitsInRadius
            if u.isTroll()
                let currentItems = u.getOwner().getEquipmentSlots().currentItems
                for each in currentItems
                    let itm = currentItems.get(each)
                    if itm.getTypeId() == itemId
                        //print("found equipped baseItem "+GetObjectName(itemId))
                        isItemEquipped = true
                        baseItemOwner = u
                        return itm
        return null        

    function findIngredientInInventories(int itemId) returns item
        for each in cashedOwnedItems
            if each.getTypeId() == itemId 
                //print("removing "+GetObjectName(itemId))
                cashedOwnedItems.remove(each)
                return each
        if EQUIPMENT_LIST.has(itemId)
            let foundEquipmentItem = findEquippedBaseItem(itemId)
            return foundEquipmentItem  
        return null

    function registerMissingItem(int itemId)
        let count = missingItemsCountMap.get(itemId)
        missingItemsCountMap.put(itemId, count+1)

    function findIngredientInRect(int itemId) returns item
        for each in cashedItems
            if each.getTypeId() == itemId and each.isVisible()
                cashedItems.remove(each)
                return each       
        return null

    function craftIngredient(int itemId) returns item
        let customItemDefinition = customItemDefinitions.get(itemId)
        if customItemDefinition.recipe.isCrafted == false
            //print("recipe is missing or item is a basic material")
            registerMissingItem(itemId)
            return null
        if customItemDefinition.preventBeingCraftedAsIngridient == true
            registerMissingItem(itemId)
            // prevent certain items from being crafted as intermediary ingridient
            return null
        let newQuickmake = new QuickMakeV2(itemId, caster, this)
        let craftedIngredient = newQuickmake.craftItem(caster)
        if craftedIngredient == null      
            return null
        foundItems.put(craftedIngredient, newQuickmake)      
        return craftedIngredient

    function printToTeam(string msg)
        if msg == null
            return
        for i =0 to bj_MAX_PLAYER_SLOTS-1
            let p = players[i]
            if IsUnitSelected(caster, p) and p.isAllyOf(caster.getOwner()) 
                printTimedToPlayerClear(msg, MESSAGE_DURATION, p)


    function assertUnitRequirement() returns boolean
        if unitRequirementId == 0
            return true
        if caster.getTypeId() == unitRequirementId
            return true
        let units = CreateGroup()
            ..enumUnitsInRange(caster.getPos(), BUILDING_CRAFTING_AOE)
        for u in units
            if u.getTypeId() == unitRequirementId and u.isAllyOf(caster.getOwner())
                units.destr()
                return true
        units.destr()
        if not missingRequiredBuildings.has(unitRequirementId)
            missingRequiredBuildings.add(unitRequirementId)
        return false


    function returnItemToTheOwner()
        if baseItemOwner== null
            doAfter(ANIMATION_PERIOD) -> 
                caster.addItemHandle(craftedItem)
            return
        if isItemEquipped
            let equipmentSlots = baseItemOwner.getOwner().getEquipmentSlots()
            let equippedItems = equipmentSlots.currentItems
            for index in equippedItems
                let itm = equippedItems.get(index)
                if itm == baseItem
                    if craftedItem == null
                        itm.setVisible(false)
                        return
                    //print("return item unequip"+GetObjectName(itm.getTypeId()))
                    //equipmentSlots.onEquipmentSlotUse(index)
                    equipmentSlots.unequipItem(itm, index)
                    nullTimer() -> 
                        gatheringSlotInstances.get(baseItemOwner).updateDummyItems()
                    doAfter(ANIMATION_PERIOD) ->
                        clickSound.playForPlayer(baseItemOwner.getOwner())
                        //print("return item onEquip"+GetObjectName(craftedItem.getTypeId()))
                        craftedItem.setPos(baseItemOwner.getPos())
                        craftedItem.setVisible(false)
                        equipmentSlots.equipItem(index, craftedItem)
        else
            //print("no item equipped")
            nullTimer() -> 
                baseItemOwner.addItemHandle(craftedItem)
        /*
        let players = caster.getOwner().getTribe().getMembers()
        for p in players
            let equipmentSlots = p.getEquipmentSlots()
            let equippedItems = equipmentSlots.currentItems
            for index in equippedItems
                let itm = equippedItems.get(index)
                if itm == baseItem
                    equipmentSlots.unequipItem(itm, index)
                    doAfter(ANIMATION_PERIOD) -> 
                        equipmentSlots.equipItem(index, craftedItem) 
                        */                     

    function removeConsumedItems()
        for each in ignoredOwnedItems
            each.remove()
        for each in foundItems
            let quickmake = foundItems.get(each)
            if quickmake != null
                foundItems.get(each).onSuccess()
            //print("removing "+GetObjectName(each.getTypeId()))
            let charges = each.getCharges()
            if charges >1 and not each == baseItem
                let pos = each.getPos()
                caster.addItemHandle(each)
                each.setCharges(charges-1)
                caster.removeItem(each)
                each.setPos(pos)
            else
                each.remove()


    function onSuccess()
        returnItemToTheOwner()
        let baseItemCharges = baseItem.getCharges()
        if baseItemCharges != 0
            craftedItem.setCharges(baseItemCharges)
        craftedItem.setVisible(true)      
        //print("successfully crafted "+GetObjectName(itemId))
        if parentInstance == null
            doAfter(ANIMATION_PERIOD) -> 
                caster.startAbilityCooldown(abilId, QM_SUCCESS_CD)
            printToTeam("Successfuly crafted "+GetObjectName(craftedItem.getTypeId()))
        removeConsumedItems()
        if this!= null
            destroy this    

    function onFailure()
        //print("failed to craft "+GetObjectName(itemId))
        for each in foundItems
            let quickmake = foundItems.get(each)
            if quickmake != null
                foundItems.get(each).onFailure()
            if not (each == baseItem and isItemEquipped)
                each.setVisible(true)   
            //print("removing crafted ingredient "+GetObjectName(craftedItem.getTypeId()))
            craftedItem.remove()
        destroy this

    
    ondestroy
        //print("destroyed")
        if parentInstance == null
            printToTeam(generateMissingBuildingsMessage()+generateMissingItemsMessage())
            unitsInRadius.destr()
            destroy cashedItems
            destroy cashedOwnedItems
            destroy missingItemsCountMap
            destroy missingRequiredBuildings
            //destroy itemsUsedInRecipe
        destroy ignoredOwnedItems
        destroy foundItems
            
function initializeBaseItems()
    for each in EQUIPMENT_LIST
        baseItems.add(each)
    baseItems.add(ITEM_THISTLES)       


init
    doAfter(1.) ->
        initializeBaseItems()
        

